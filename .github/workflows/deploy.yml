name: Deploy to VM (Docker Compose)

on:
  push:
    branches: [ main ]   # adapte si ta branche par défaut n'est pas 'main'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # --- Smoke test : vérifier la connexion SSH et l'environnement ---
      - name: SSH smoke test (uname, whoami, docker --version)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          script_stop: true
          debug: true
          script: |
            set -x
            whoami
            uname -a
            id
            ls -la /opt || true
            which docker || true
            sudo docker --version || true

      # --- Déploiement ---
      - name: Deploy on VM via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          script_stop: true
          debug: true
          script: |
            set -euo pipefail

            APP_DIR=/opt/familyzen
            REPO=https://github.com/sdis24/familyzen-api.git
            BRANCH=main

            # 1) Installer Docker si absent
            if ! command -v docker >/dev/null 2>&1; then
              sudo apt-get update -y
              sudo apt-get install -y ca-certificates curl gnupg
              sudo install -m 0755 -d /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \
              $(. /etc/os-release && echo $VERSION_CODENAME) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt-get update -y
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
              sudo systemctl enable --now docker
            fi

            # 2) Préparer le dossier
            sudo mkdir -p "$APP_DIR"
            sudo chown $USER:$USER "$APP_DIR"

            # 3) Code (clone initial ou mise à jour)
            if [ ! -d "$APP_DIR/.git" ]; then
              git clone --depth 1 --branch "$BRANCH" "$REPO" "$APP_DIR"
            else
              cd "$APP_DIR"
              git fetch --all --prune
              git reset --hard "origin/$BRANCH"
            fi

            cd "$APP_DIR"

            # 4) Build & run
            sudo docker compose up -d --build

            # 5) Health check (jusqu'à 2 min)
            end=$((SECONDS+120))
            until curl -fsS http://localhost:8000/health | grep -q '"ok": *true'; do
              if [ $SECONDS -ge $end ]; then
                echo '[Health KO] Derniers logs:'
                sudo docker compose logs --tail 200
                exit 1
              fi
              sleep 2
            done
            echo '[Health OK]'
