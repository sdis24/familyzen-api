name: Deploy to VM (Docker Compose)

on:
  push:
    branches: [ main ]

# Annule le run précédent si un nouveau push arrive
concurrency:
  group: deploy-familyzen
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout (context only)
        uses: actions/checkout@v4

      - name: Smoke test SSH (uname, whoami, docker)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          script_stop: true
          debug: true
          script: |
            set -euo pipefail
            whoami
            uname -a
            if command -v docker >/dev/null 2>&1; then
              docker --version || true
              docker compose version || true
            else
              echo "docker not found (ok, will install in next step)"
            fi

      - name: Deploy on VM
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          script_stop: true
          script: |
            set -euo pipefail

            APP_DIR=/opt/familyzen
            REPO=https://github.com/sdis24/familyzen-api.git
            BRANCH=main

            # 1) Docker + Compose si manquants
            if ! command -v docker >/dev/null 2>&1; then
              echo "[install] docker"
              sudo apt-get update -y
              sudo apt-get install -y ca-certificates curl gnupg
              sudo install -m 0755 -d /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian $(. /etc/os-release && echo $VERSION_CODENAME) stable" \
                | sudo tee /etc/apt/sources.list.d/docker.list >/dev/null
              sudo apt-get update -y
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
            fi

            # 2) Dossier + droits
            sudo mkdir -p "$APP_DIR"
            sudo chown "$USER:$USER" "$APP_DIR"

            # 3) Code: clone ou reset hard
            if [ ! -d "$APP_DIR/.git" ]; then
              echo "[code] fresh clone"
              git clone --depth=1 --branch "$BRANCH" "$REPO" "$APP_DIR"
            else
              echo "[code] fetch & hard reset"
              cd "$APP_DIR"
              git fetch --all --prune
              git reset --hard "origin/$BRANCH"
            fi

            cd "$APP_DIR"

            # 4) Build & run
            sudo docker compose up -d --build

            # 5) Health check tolérant (jusqu'à 3 min)
            end=$((SECONDS+180))
            ok=false
            while [ $SECONDS -lt $end ]; do
              if curl -fsS http://localhost:8000/health -o /tmp/health8000 2>/dev/null || true; then
                if grep -Eqi '"ok"[[:space:]]*:[[:space:]]*true|^ok$' /tmp/health8000; then
                  ok=true; break
                fi
              fi
              if curl -fsS http://localhost/health -o /tmp/health80 2>/dev/null || true; then
                if grep -Eqi '"ok"[[:space:]]*:[[:space:]]*true|^ok$' /tmp/health80; then
                  ok=true; break
                fi
              fi
              sleep 2
            done

            if [ "$ok" = true ]; then
              echo "[health] OK"
            else
              echo "[health] FAIL — docker compose logs ci-dessous :"
              sudo docker compose ps || true
              sudo docker compose logs --no-color --tail=200 || true
              exit 1
            fi

