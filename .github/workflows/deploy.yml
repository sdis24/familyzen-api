name: Deploy to VM (Docker Compose)

on:
  push:
    branches: [ main ]

# Annule le run précédent si un nouveau push arrive
concurrency:
  group: deploy-familyzen
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Smoke test SSH (uname, whoami, docker)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          script_stop: true
          script: |
            set -e
            whoami
            uname -a
            docker --version || true

      - name: Deploy on VM
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          script_stop: true
          script: |
            # on écrit un script local pour éviter toute galère de quoting et on l'exécute
            cat >/tmp/deploy.sh <<'BASH'
            #!/usr/bin/env bash
            set -Eeuo pipefail

            on_error() {
              echo "::group::docker compose ps"
              sudo docker compose -f "$APP_DIR/docker-compose.yml" ps || true
              echo "::endgroup::"
              echo "::group::docker logs (last 200)"
              sudo docker compose -f "$APP_DIR/docker-compose.yml" logs --no-color --tail=200 || true
              echo "::endgroup::"
              exit 1
            }
            trap on_error ERR

            APP_DIR=/opt/familyzen
            REPO="https://github.com/sdis24/familyzen-api.git"
            BRANCH="main"

            # 1) Docker / Compose si manquants
            if ! command -v docker >/dev/null 2>&1; then
              sudo apt-get update -y
              sudo apt-get install -y ca-certificates curl gnupg
              sudo install -m 0755 -d /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian $(. /etc/os-release && echo "$VERSION_CODENAME") stable" \
                | sudo tee /etc/apt/sources.list.d/docker.list >/dev/null
              sudo apt-get update -y
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
            fi

            # 2) Dossier + droits
            sudo mkdir -p "$APP_DIR"
            sudo chown "$USER:$USER" "$APP_DIR"

            # 3) Code: clone ou reset hard
            if [ ! -d "$APP_DIR/.git" ]; then
              git clone --depth=1 --branch "$BRANCH" "$REPO" "$APP_DIR"
            else
              git -C "$APP_DIR" fetch --all --prune
              git -C "$APP_DIR" reset --hard "origin/$BRANCH"
            fi

            # 4) Build & run
            cd "$APP_DIR"
            sudo docker compose up -d --build

            # 5) Health check robuste (HTTP 200 sur /health en 8000 et 80)
            ok=false
            deadline=$((SECONDS+240))   # max 4 minutes
            while [ $SECONDS -lt $deadline ]; do
              for url in http://localhost:8000/health http://localhost/health; do
                code=$(curl -s -o /dev/null -w "%{http_code}" "$url" || true)
                if [ "$code" = "200" ]; then
                  echo "Health OK at $url"
                  ok=true
                  break 2
                fi
              done
              sleep 2
            done

            if [ "$ok" = true ]; then
              echo "✅ DEPLOYMENT OK"
              exit 0
            else
              echo "Health check FAILED"
              on_error
            fi
            BASH

            sudo bash /tmp/deploy.sh
